# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "ASSIGN DECREMENT DO ID INCREMENT INT LBRACE LESS LPAREN NUMBER RBRACE RPAREN SEMICOLON WHILEprogram : statement\n    | statement program\n    | emptystatement : declaration\n    | assignment\n    | increment\n    | decrement\n    | do_whiledeclaration : INT ID SEMICOLONassignment : ID ASSIGN expression SEMICOLONincrement : ID INCREMENT SEMICOLONdecrement : ID DECREMENT SEMICOLONexpression : ID\n    | NUMBER\n    | ID LESS NUMBERdo_while : DO LBRACE program RBRACE WHILE LPAREN expression RPAREN SEMICOLONempty :"

_lr_action_items = {
    "$end": (
        [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            12,
            18,
            22,
            23,
            26,
            33,
        ],
        [
            -17,
            0,
            -1,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -2,
            -9,
            -11,
            -12,
            -10,
            -16,
        ],
    ),
    "INT": (
        [
            0,
            2,
            4,
            5,
            6,
            7,
            8,
            17,
            18,
            22,
            23,
            26,
            33,
        ],
        [
            9,
            9,
            -4,
            -5,
            -6,
            -7,
            -8,
            9,
            -9,
            -11,
            -12,
            -10,
            -16,
        ],
    ),
    "ID": (
        [
            0,
            2,
            4,
            5,
            6,
            7,
            8,
            9,
            14,
            17,
            18,
            22,
            23,
            26,
            30,
            33,
        ],
        [
            10,
            10,
            -4,
            -5,
            -6,
            -7,
            -8,
            13,
            19,
            10,
            -9,
            -11,
            -12,
            -10,
            19,
            -16,
        ],
    ),
    "DO": (
        [
            0,
            2,
            4,
            5,
            6,
            7,
            8,
            17,
            18,
            22,
            23,
            26,
            33,
        ],
        [
            11,
            11,
            -4,
            -5,
            -6,
            -7,
            -8,
            11,
            -9,
            -11,
            -12,
            -10,
            -16,
        ],
    ),
    "RBRACE": (
        [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            12,
            17,
            18,
            22,
            23,
            24,
            26,
            33,
        ],
        [
            -1,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -2,
            -17,
            -9,
            -11,
            -12,
            27,
            -10,
            -16,
        ],
    ),
    "ASSIGN": (
        [
            10,
        ],
        [
            14,
        ],
    ),
    "INCREMENT": (
        [
            10,
        ],
        [
            15,
        ],
    ),
    "DECREMENT": (
        [
            10,
        ],
        [
            16,
        ],
    ),
    "LBRACE": (
        [
            11,
        ],
        [
            17,
        ],
    ),
    "SEMICOLON": (
        [
            13,
            15,
            16,
            19,
            20,
            21,
            28,
            32,
        ],
        [
            18,
            22,
            23,
            -13,
            26,
            -14,
            -15,
            33,
        ],
    ),
    "NUMBER": (
        [
            14,
            25,
            30,
        ],
        [
            21,
            28,
            21,
        ],
    ),
    "RPAREN": (
        [
            19,
            21,
            28,
            31,
        ],
        [
            -13,
            -14,
            -15,
            32,
        ],
    ),
    "LESS": (
        [
            19,
        ],
        [
            25,
        ],
    ),
    "WHILE": (
        [
            27,
        ],
        [
            29,
        ],
    ),
    "LPAREN": (
        [
            29,
        ],
        [
            30,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "program": (
        [
            0,
            2,
            17,
        ],
        [
            1,
            12,
            24,
        ],
    ),
    "statement": (
        [
            0,
            2,
            17,
        ],
        [
            2,
            2,
            2,
        ],
    ),
    "empty": (
        [
            0,
            2,
            17,
        ],
        [
            3,
            3,
            3,
        ],
    ),
    "declaration": (
        [
            0,
            2,
            17,
        ],
        [
            4,
            4,
            4,
        ],
    ),
    "assignment": (
        [
            0,
            2,
            17,
        ],
        [
            5,
            5,
            5,
        ],
    ),
    "increment": (
        [
            0,
            2,
            17,
        ],
        [
            6,
            6,
            6,
        ],
    ),
    "decrement": (
        [
            0,
            2,
            17,
        ],
        [
            7,
            7,
            7,
        ],
    ),
    "do_while": (
        [
            0,
            2,
            17,
        ],
        [
            8,
            8,
            8,
        ],
    ),
    "expression": (
        [
            14,
            30,
        ],
        [
            20,
            31,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    ("program -> statement", "program", 1, "p_program", "parser.py", 63),
    ("program -> statement program", "program", 2, "p_program", "parser.py", 64),
    ("program -> empty", "program", 1, "p_program", "parser.py", 65),
    ("statement -> declaration", "statement", 1, "p_statement", "parser.py", 70),
    ("statement -> assignment", "statement", 1, "p_statement", "parser.py", 71),
    ("statement -> increment", "statement", 1, "p_statement", "parser.py", 72),
    ("statement -> decrement", "statement", 1, "p_statement", "parser.py", 73),
    ("statement -> do_while", "statement", 1, "p_statement", "parser.py", 74),
    (
        "declaration -> INT ID SEMICOLON",
        "declaration",
        3,
        "p_declaration",
        "parser.py",
        79,
    ),
    (
        "assignment -> ID ASSIGN expression SEMICOLON",
        "assignment",
        4,
        "p_assignment",
        "parser.py",
        84,
    ),
    (
        "increment -> ID INCREMENT SEMICOLON",
        "increment",
        3,
        "p_increment",
        "parser.py",
        89,
    ),
    (
        "decrement -> ID DECREMENT SEMICOLON",
        "decrement",
        3,
        "p_decrement",
        "parser.py",
        94,
    ),
    ("expression -> ID", "expression", 1, "p_expression", "parser.py", 99),
    ("expression -> NUMBER", "expression", 1, "p_expression", "parser.py", 100),
    ("expression -> ID LESS NUMBER", "expression", 3, "p_expression", "parser.py", 101),
    (
        "do_while -> DO LBRACE program RBRACE WHILE LPAREN expression RPAREN SEMICOLON",
        "do_while",
        9,
        "p_do_while",
        "parser.py",
        109,
    ),
    ("empty -> <empty>", "empty", 0, "p_empty", "parser.py", 116),
]
